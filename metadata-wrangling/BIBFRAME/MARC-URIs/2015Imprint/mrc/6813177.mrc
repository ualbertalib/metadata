05388nam a2200517 i 4500001000800000005001700008006001900025007001500044008004100059020002500100020002500125024004300150035001700193039001200210040004500222050002400267082001600291090002500307100002800332245011900360264010400479300005800583336002100641337002600662338003200688490007800720500007600798504005700874505072700931505066001658505024402318505031402562506006002876520130002936588006104236596000704297650003704304650004904341700003704390830006704427830007804494856008604572949001904658926010904677758008404786681317720150222143346.0m    eo  d        cr cn |||m|||a150222s2015    caua   foab   000 0 eng d  a9781627053723qebook  z9781627053716qprint7 a10.2200/S00621ED1V01Y201412CGR0182doi  aocn903883142  aexclude  aCaBNVSLbengerdacCaBNVSLdCaBNVSLdAEU 4aTR897.7b.N545 201504a006.696223  aInternet AccessbAEU1 aNiebe, Sarah.,eauthor.10aNumerical methods for linear complementarity problems in physics-based animation /cSarah Niebe and Kenny Erleben. 1aSan Rafael, California (1537 Fourth Street, San Rafael, CA  94901 USA) :bMorgan & Claypool,c2015.  a1 online resource (viii, 151 pages) :billustrations.  atext2rdacontent  aelectronic2isbdmedia  aonline resource2rdacarrier1 aSynthesis lectures on computer graphics and animation,x1933-9003 ;v# 18  aPart of: Synthesis digital library of engineering and computer science.  aIncludes bibliographical references (pages 145-150).0 a1. Introduction -- 1.1 Understanding the problem -- 1.1.1 First-order optimality is a linear complementarity problem -- 1.1.2 Nonsmooth root search reformulations -- 1.1.3 The boxed linear complementarity problem -- 1.1.4 Other reformulations -- 1.2 The problem in n-dimensions -- 1.2.1 1D BLCP to 4D LCP -- 1.2.2 The boxed linear complementarity problem in higher dimensions -- 1.2.3 BLCP and the QP formulation -- 1.2.4 Converting BLCP to LCP -- 1.2.5 Nonsmooth reformulations of BLCP -- 1.3 Examples from physics-based animation -- 1.3.1 Fluid-solid wall boundary conditions -- 1.3.2 Free-flowing granular matter -- 1.3.3 Density correction -- 1.3.4 Joint limits in inverse kinematics -- 1.3.5 Contact force examples --8 a2. Numerical methods -- 2.1 Pivoting methods -- 2.1.1 Direct methods for small-sized problems -- 2.1.2 Incremental pivoting "Baraff style" -- 2.2 Projection or sweeping methods -- 2.2.1 Splitting methods -- 2.2.2 Using a quadratic programming problem -- 2.2.3 The blocked Gauss-Seidel method -- 2.2.4 Staggering -- 2.2.5 The projected Gauss-Seidel subspace minimization method -- 2.2.6 The nonsmooth nonlinear conjugate gradient method -- 2.3 The interior point method -- 2.4 Newton methods -- 2.4.1 The minimum map Newton method -- 2.4.2 The Fischer-Newton method -- 2.4.3 Penalized Fischer-Newton method -- 2.4.4 Tips, tricks and implementation hacks --8 a3. Guide for software and selecting methods -- 3.1 Overview of numerical properties of methods covered -- 3.2 Existing practice on mapping models to methods -- 3.2.1 Existing software solutions -- 3.3 Future of LCPs in computer graphics --8 aA. Basic calculus -- Order notation -- What is a limit? -- The small-o notation -- The big-o notation -- Lipschitz functions -- Derivatives -- B. First-order optimality conditions -- C. Convergence, performance and robustness experiments -- D. Num4LCP -- Using Num4LCP -- Bibliography -- Authors' biographies.  aAccess restricted to authorized users and institutions.3 aLinear complementarity problems (LCPs) have for many years been used in physics-based animation to model contact forces between rigid bodies in contact. More recently, LCPs have found their way into the realm of fluid dynamics. Here, LCPs are used to model boundary conditions with fluid-wall contacts. LCPs have also started to appear in deformable models and granular simulations. There is an increasing need for numerical methods to solve the resulting LCPs with all these new applications. This book provides a numerical foundation for such methods, especially suited for use in computer graphics. This book is mainly intended for a researcher/Ph.D. student/post-doc/professor who wants to study the algorithms and do more work/research in this area. Programmers might have to invest some time brushing up on math skills, for this we refer to Appendices A and B. The reader should be familiar with linear algebra and differential calculus. We provide pseudo code for all the numerical methods, which should be comprehensible by any computer scientist with rudimentary programming skills. The reader can find an online supplementary code repository, containing Matlab implementations of many of the core methods covered in these notes, as well as a few Python implementations [Erleben, 2011].  aTitle from PDF title page (viewed on February 22, 2015).  a44 0aComputer animationxMathematics. 0aLinear complementarity problemxMathematics.1 aErleben, Kenny,d1974-,eauthor. 0aSynthesis digital library of engineering and computer science. 0aSynthesis lectures in computer graphics and animation ;v# 18.x1933-9003403University of Alberta Accessuhttp://dx.doi.org/10.2200/S00621ED1V01Y201412CGR018  hUAINzSYNTHDIG  aInternet AccesswLCc1i6813177-1001lINTERNETmUAINTERNETrYsYtE-RESOURCEu3/2/2015xE-BOOKzSYNTHDIG01ahttp://id.loc.gov/authorities/names/n2005046013bhttp://viaf.org/viaf/120263852