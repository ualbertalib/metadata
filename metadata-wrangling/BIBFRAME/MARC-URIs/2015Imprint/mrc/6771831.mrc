05009nam a2200553 i677183120141224145117.0m    eo  d        cr cn |||m|||a141224s2015    caua   foab   000 0 eng d  a9781627056526qebook  z9781627056519qprint7 a10.2200/S00614ED1V01Y201411SWE0032doi  aexclude  aCaBNVSLbengerdacCaBNVSLdCaBNVSLdAEU 4aQA76.774.I67bT557 201504a004.167223  aInternet AccessbAEU1 aTilley, Scott R.q(Scott Robert),d1964-,eauthor.10aTesting iOS apps with HadoopUnit :brapid distributed GUI testing /cScott Tilley, Krissada Dechokul. 1aSan Rafael, California (1537 Fourth Street, San Rafael, CA  94901 USA) :bMorgan & Claypool,c2015.  a1 online resource (xix, 83 pages) :billustrations.  atext2rdacontent  aelectronic2isbdmedia  aonline resource2rdacarrier1 aSynthesis lectures on software engineering,x2328-3327 ;v# 3  aPart of: Synthesis digital library of engineering and computer science.  aIncludes bibliographical references (pages 77-82).0 a1. Introduction -- 1.1 GUI testing of iOS apps -- 1.2 Rapid testing with HadoopUnit -- 1.3 Related work -- 1.3.1 GUI testing tools -- 1.3.2 Distributed testing platforms --8 a2. Background -- 2.1 Software testing -- 2.1.1 Regression testing -- 2.1.2 GUI testing -- 2.2 UI automation -- 2.2.1 UI automation script -- 2.2.2 Command-line workflow with UI automation -- 2.2.3 Rake -- 2.2.4 Virtualization -- 2.3 Hadoop and HadoopUnit -- 2.3.1 Hadoop -- 2.3.2 HadoopUnit --8 a3. Using UI automation with Apache Hadoop -- 3.1 UI automation test suites -- 3.1.1 Test case design -- 3.1.2 Test case analysis -- 3.2 Apache Hadoop customization -- 3.2.1 Operational environment -- 3.2.2 Test results -- 3.2.3 Revised architecture -- 3.3 Using HadoopUnit -- 3.3.1 Test case list -- 3.3.2 Rake -- 3.3.3 Test execution --8 a4. Rapid GUI testing of iOS apps -- 4.1 Experiments -- 4.2 Discussion of results -- 4.3 Threats to validity -- 4.3.1 Test suites -- 4.3.2 Hadoop optimization -- 4.3.3 Network issues --8 a5. Summary -- 5.1 Summary of results -- 5.1.1 Research objectives -- 5.1.2 Research contributions -- 5.2 Future work -- 5.3 Concluding remarks --8 aAppendix A. Setting up a HadoopUnit cluster on Mac OS X -- Appendix B. HadoopUnit source code for iOS GUI testing -- References -- About the authors.  aAccess restricted to authorized users and institutions.3 aSmartphone users have come to expect high-quality apps. This has increased the importance of software testing in mobile software development. Unfortunately, testing apps--particularly the GUI--can be very time-consuming. Exercising every user interface element and verifying transitions between different views of the app under test quickly becomes problematic. For example, execution of iOS GUI test suites using Apple's UI Automation framework can take an hour or more if the app's interface is complicated. The longer it takes to run a test, the less frequently the test can be run, which in turn reduces software quality. This book describes how to accelerate the testing process for iOS apps using HadoopUnit, a distributed test execution environment that leverages the parallelism inherent in the Hadoop platform. HadoopUnit was previously used to run unit and system tests in the cloud. It has been modified to perform GUI testing of iOS apps on a small-scale cluster--a modest computing infrastructure available to almost every developer. Experimental results have shown that distributed test execution with HadoopUnit can significantly outperform the test execution on a single machine, even if the size of the cluster used for the execution is as small as two nodes. This means that the approach described in this book could be adopted without a huge investment in IT resources. HadoopUnit is a cost-effective solution for reducing lengthy test execution times of system-level GUI testing of iOS apps.  aTitle from PDF title page (viewed on December 24, 2014).  a4400aiOS (Electronic resource)00aApache Hadoop. 0aiPhone (Smartphone)xMobile appsxTesting. 0aMobile appsxTesting.1 aDechokul, Krissada.,eauthor. 0aSynthesis digital library of engineering and computer science. 0aSynthesis lectures on software engineering ;v# 3.x2328-3327403University of Alberta Accessuhttp://dx.doi.org/10.2200/S00614ED1V01Y201411SWE003  hUAINzSYNTHDIG  aInternet AccesswLCc1i6771831-1001lINTERNETmUAINTERNETrYsYtE-RESOURCEu1/9/2015xE-BOOKzSYNTHDIG01ahttp://id.loc.gov/authorities/names/no2001096332bhttp://viaf.org/viaf/231825